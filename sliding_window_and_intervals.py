# -*- coding: utf-8 -*-
"""SWE_Fellowship.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXo_7BVLKHvWAKpzvJxKXVxD2klh6bFH
"""

# Consider a scenario where you are tasked with finding unique combinations of letters within any given sequence, particularly focusing on combinations that span three characters without any repetition.

# You will be given a string, and your objective is to count how many distinct 3-letter combinations can be found within it.
# It's important to note that each character sequence, or substring, should be evaluated as its own entity, meaning if the same combination appears more than once, each occurrence is counted separately.

# A 'good' substring is defined as a 3-character sequence within the string that does not include any repeated characters.

# For instance:
# Input: s = "xyzzaz"
# Output: 1
# In this example, "xyz" is the only 'good' substring among the four possible substrings ('xyz', 'yzz', 'zza', 'zaz').

# Another Example:
# Input: s = "aababcabc"
# Output: 4
# Here, the 'good' substrings are 'abc', 'bca', 'cab', and again 'abc', making a total of four distinct occurrences although 'abc' appears twice.

# Constraints:
# - The input string s will have a length ranging from 1 to 100 characters.
# - The string will only consist of lowercase English letters.

def countUniqueTrios(s):

    # Initialize a counter for good substrings
    good_substrings_count = 0

    # Iterate through the string to check each 3-character window
    for i in range(len(s) - 2):

        # Get the current 3-character substring
        current_substring = s[i:i + 3]

        # Check if all characters in the substring are unique
        if len(set(current_substring)) == 3:
            good_substrings_count += 1

    return good_substrings_count

# Example usage
s1 = "xyzzaz"
s2 = "aababcabc"
s3 = "abcd"
s4 = "aaaa"
s5 = "abcabcabc"
print(countUniqueTrios(s1))
print(countUniqueTrios(s2))
print(countUniqueTrios(s3))
print(countUniqueTrios(s4))
print(countUniqueTrios(s5))