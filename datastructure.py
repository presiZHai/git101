# -*- coding: utf-8 -*-
"""DataStructure

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19yqz9u0YH2Z5RyIihQaU44KRjv-siRRj
"""

import requests
import urllib.parse

class Solution:

    def run(self, film, character):
        # Encode film title and character name for URL
        film_encoded = urllib.parse.quote(film)
        character_encoded = urllib.parse.quote(character)

        # Define API endpoints
        films_endpoint = f"https://challenges.hackajob.co/swapi/api/films/?search={film_encoded}"
        characters_endpoint = f"https://challenges.hackajob.co/swapi/api/people/?search={character_encoded}"

        # Initialize lists to store film titles and character names
        film_titles = []
        character_names = []

        # Function to extract film titles from response
        def extract_films(response):
            films = response.get('results', [])
            for film in films:
                film_titles.append(film['title'])

        # Function to extract character names from response
        def extract_characters(response):
            characters = response.get('results', [])
            for character in characters:
                character_names.append(character['name'])

        # Fetch data from SWAPI API
        try:
            film_response = requests.get(films_endpoint).json()
            character_response = requests.get(characters_endpoint).json()
        except requests.RequestException as e:
            print(f"Error fetching data from SWAPI API: {e}")
            return None

        # Extract film titles and character names
        extract_films(film_response)
        extract_characters(character_response)

        # Sort the lists alphabetically
        film_titles.sort()
        character_names.sort()

        # Format the output string
        if not character_names:
            character_names.append("none")
        if not film_titles:
            film_titles.append("none")
        films_and_characters = f"{film}: {', '.join(character_names)}; {character}: {', '.join(film_titles)}"

        return films_and_characters

# Example usage:
solution = Solution()
print(solution.run("A New Hope", "Raymus Antilles"))
print(solution.run("The Force Awakens", "Poggle the Lesser"))
print(solution.run("The Force Awakens", "Walter White"))

import requests
import urllib.parse

class Solution:

    def run(self, film, character):
        # Encode film title and character name for URL
        film_encoded = urllib.parse.quote(film)
        character_encoded = urllib.parse.quote(character)

        # Define API endpoints
        films_endpoint = f"https://challenges.hackajob.co/swapi/api/films/?search={film_encoded}"
        characters_endpoint = f"https://challenges.hackajob.co/swapi/api/people/?search={character_encoded}"

        # Initialize lists to store film titles and character names
        film_titles = []
        character_films = []

        # Function to extract film titles from response
        def extract_films(response):
            films = response.get('results', [])
            for film in films:
                film_titles.append(film['title'])

        # Function to extract films in which the character appeared from response
        def extract_character_films(response):
            characters = response.get('results', [])
            for character in characters:
                films = character['films']
                for film_url in films:
                    film_response = requests.get(film_url).json()
                    character_films.append(film_response['title'])

        # Fetch data from SWAPI API
        try:
            film_response = requests.get(films_endpoint).json()
            character_response = requests.get(characters_endpoint).json()
        except requests.RequestException as e:
            print(f"Error fetching data from SWAPI API: {e}")
            return None

        # Extract film titles and films in which the character appeared
        extract_films(film_response)
        extract_character_films(character_response)

        # Sort the lists alphabetically
        film_titles.sort()
        character_films.sort()

        # Format the output string
        if not film_titles:
            film_titles.append("none")
        if not character_films:
            character_films.append("none")
        films_and_characters = f"{film}: {', '.join(character_films)}; {character}: {', '.join(film_titles)}"

        return films_and_characters

# Example usage:
solution = Solution()
print(solution.run("A New Hope", "Raymus Antilles"))

import requests
from urllib.parse import urlencode

class Solution:

  def run(self, film, character):
    """
    This method fetches information about a character in a Star Wars film

    Args:
        film (str): Name of the film
        character (str): Name of the character

    Returns:
        str: Information about the films and characters in the format:
              "Film: CharacterA, CharacterB, CharacterC; Character: FilmA, FilmB, FilmC"
    """

    # URL encode film and character names
    encoded_film = urlencode({'search': film})
    encoded_character = urlencode({'search': character})

    # Build API URLs for films and characters
    film_url = f"https://challenges.hackajob.co/swapi/api/films/?{encoded_film}"
    character_url = f"https://challenges.hackajob.co/swapi/api/people/?{encoded_character}"

    # Fetch data from the APIs
    film_data = self.fetch_data(film_url)
    character_data = self.fetch_data(character_url)

    # Extract information from the data
    film_characters = self.get_film_characters(film_data)
    character_films = self.get_character_films(character_data)

    # Handle cases where character is not found or not in the film
    if not character_films:
      character_films = "none"
    if not film_characters:
      film_characters = "none"

    # Combine and format the information
    return f"Film: {', '.join(sorted(film_characters))}; Character: {', '.join(sorted(character_films))}"

  def fetch_data(self, url):
    """
    Fetches data from the provided URL

    Args:
        url (str): URL of the API endpoint

    Returns:
        dict: Parsed JSON data from the API response
    """

    response = requests.get(url)
    if response.status_code == 200:
      return response.json()
    else:
      raise Exception(f"Error fetching data: {response.status_code}")

  def get_film_characters(self, film_data):
    """
    Extracts character names from the film data

    Args:
        film_data (dict): Data from the film API response

    Returns:
        list: List of character names in the film
    """

    characters = []
    if film_data.get('results'):
      for result in film_data['results']:
        characters.extend([character['name'] for character in result.get('characters', [])])
    return characters

  def get_character_films(self, character_data):
    """
    Extracts film titles from the character data

    Args:
        character_data (dict): Data from the character API response

    Returns:
        list: List of film titles where the character appeared
    """

    films = []
    if character_data.get('results'):
      for result in character_data['results']:
        if result['name'] == self.character:  # Replace 'self.character' with the actual character name
          films = [film_url.split('/')[-2] for film_url in result.get('films', [])]
    return films

import requests
from urllib.parse import urlencode

class Solution:

  def run(self, film, character):
    """
    This method fetches information about a character in a Star Wars film

    Args:
        film (str): Name of the film
        character (str): Name of the character

    Returns:
        str: Information about the films and characters in the format:
              "Film: CharacterA, CharacterB, CharacterC; Character: FilmA, FilmB, FilmC"
    """

    # URL encode film and character names
    encoded_film = urlencode({'search': film})
    encoded_character = urlencode({'search': character})

    # Build API URLs for films and characters
    film_url = f"https://challenges.hackajob.co/swapi/api/films/?{encoded_film}"
    character_url = f"https://challenges.hackajob.co/swapi/api/people/?{encoded_character}"

    # Fetch data from the APIs
    film_data = self.fetch_data(film_url)
    character_data = self.fetch_data(character_url)

    # Extract information from the data
    film_characters = self.get_film_characters(film_data)
    character_films = self.get_character_films(character_data, character)  # Pass 'character' directly

    # Handle cases where character is not found or not in the film
    if not character_films:
      character_films = "none"
    if not film_characters:
      film_characters = "none"

    # Combine and format the information
    return f"Film: {', '.join(sorted(film_characters))}; Character: {', '.join(sorted(character_films))}"

  def fetch_data(self, url):
    """
    Fetches data from the provided URL

    Args:
        url (str): URL of the API endpoint

    Returns:
        dict: Parsed JSON data from the API response
    """

    response = requests.get(url)
    if response.status_code == 200:
      return response.json()
    else:
      raise Exception(f"Error fetching data: {response.status_code}")

  def get_film_characters(self, film_data):
    """
    Extracts character names from the film data

    Args:
        film_data (dict): Data from the film API response

    Returns:
        list: List of character names in the film
    """

    characters = []
    if film_data.get('results'):
      for result in film_data['results']:
        characters.extend([character['name'] for character in result.get('characters', [])])
    return characters

  def get_character_films(self, character_data, character):
    """
    Extracts film titles from the character data

    Args:
        character_data (dict): Data from the character API response
        character (str): Name of the character (passed from 'run' method)

    Returns:
        list: List of film titles where the character appeared
    """

    films = []
    if character_data.get('results'):
      for result in character_data['results']:
        if result['name'] == character:
          films = [film_url.split('/')[-2] for film_url in result.get('films', [])]
    return films

# Example usage
solution = Solution()
result = solution.run("A New Hope", "Raymus Antilles")
print(result)