# -*- coding: utf-8 -*-
"""Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gH7v3gu6xHU3H5MDZl3odirRNj8bBwlL

### Question 1
"""

def Exercise1(num):

    # length of arrays
    n = len(num)

    # Initialise 3 arrays; L, R and ans
    L, R, ans = [0]*n, [0]*n, [0]*n

    # Calculate the product of all elements to the left of i
    L[0] = 1
    for i in range(1, n):
        L[i] = L[i-1] * num[i-1]

    # Calculate the product of all elements to the right of i
    R[n-1] = 1
    for i in reversed(range(n-1)):
        R[i] = R[i+1] * num[i+1]

    # Calculate the final result
    for i in range(n):
        ans[i] = L[i] * R[i]

    return ans

# Example

num = [1,2,3,4]

Exercise1(num)

"""### Question 2"""

def Exercise2(matrix):
    if not matrix:
        return []

    m, n = len(matrix), len(matrix[0])
    ans = []
    # initializing 4 variables: top, bottom, left, and right, which represent the boundaries of the current layer of the spiral.
    top, bottom, left, right = 0, m-1, 0, n-1

    while top <= bottom and left <= right:
        # Traverse right
        for j in range(left, right+1):
            ans.append(matrix[top][j])
        top += 1

        # Traverse down
        for i in range(top, bottom+1):
            ans.append(matrix[i][right])
        right -= 1

        # Traverse left
        if top <= bottom:
            for j in reversed(range(left, right+1)):
                ans.append(matrix[bottom][j])
            bottom -= 1

        # Traverse up
        if left <= right:
            for i in reversed(range(top, bottom+1)):
                ans.append(matrix[i][left])
            left += 1

    return ans

#Example

matrix = [[1,2,3],[4,5,6],[7,8,9]]

Exercise2(matrix)

"""### Question 3"""

def Exercise3(nums1, nums2, nums3, nums4):
    count = 0
    num_dict = {}

    # Populate num_dict with the frequency of each element in nums4
    for num in nums4:
        if num in num_dict:
            num_dict[num] += 1
        else:
            num_dict[num] = 1

    # Iterate through nums1, nums2 and nums3
    for i in range(len(nums1)):
        for j in range(len(nums2)):
            for k in range(len(nums3)):
                # Calculate the complementary value needed to make the sum zero
                complement = -(nums1[i] + nums2[j] + nums3[k])

                # Check if the complement exists in the num_dict and add its frequency to count
                if complement in num_dict:
                    count += num_dict[complement]

    return count

#Example

nums1 = [1,2]
nums2 = [-2,-1]
nums3 = [-1,2]
nums4 = [0,2]

Exercise3(nums1, nums2, nums3, nums4)

"""### Question 4"""

def Exercise4(height):
    n = len(height)
    left = 0
    right = n - 1
    max_area = 0
    while left < right:
        current_area = min(height[left], height[right]) * (right - left)
        max_area = max(max_area, current_area)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1
    return max_area

"""### Question 5"""

def Exercise5(nums):
    num_set = set(nums)
    longest_streak = 0

    for num in num_set:
        if num - 1 not in num_set: # if num is the beginning of a streak
            current_num = num
            current_streak = 1

            while current_num + 1 in num_set: # while streak continues
                current_num += 1
                current_streak += 1

            longest_streak = max(longest_streak, current_streak) # update longest streak

    return longest_streak

# Example

nums = [0,3,7,2,5,8,4,6,0,1]

Exercise5(nums)

"""### Question 6"""

def Exercise6(nums):
    slow = nums[0]
    fast = nums[0]

    # Find the meeting point of the two pointers
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    # Reset the slow pointer to the first element and keep the fast pointer where it is
    slow = nums[0]

    # Move both pointers until they meet again
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    # The meeting point is the repeated number
    return slow

# Example

nums = [3,1,3,4,2]

Exercise6(nums)

"""### Question 7"""

def Exercise7(s, k):
    left, right = 0, 0
    max_len = 0
    char_freq = {}

    while right < len(s):
        # expand the window to the right
        char_freq[s[right]] = char_freq.get(s[right], 0) + 1

        # if the window contains more than k distinct characters, shrink the window from the left
        while len(char_freq) > k:
            char_freq[s[left]] -= 1
            if char_freq[s[left]] == 0:
                del char_freq[s[left]]
            left += 1

        # update the maximum length
        max_len = max(max_len, right - left + 1)
        right += 1

    return max_len

#@title Example

s = "eceba"
k = 2

Exercise7(s, k)

"""### Question 8"""

def Exercis8(nums, k):
    if not nums:
        return []
    n = len(nums)
    if k == 1:
        return nums
    max_idx = []
    for i in range(k):
        while max_idx and nums[i] >= nums[max_idx[-1]]:
            max_idx.pop()
        max_idx.append(i)
    res = [nums[max_idx[0]]]
    for i in range(k, n):
        if max_idx[0] <= i - k:
            max_idx.pop(0)
        while max_idx and nums[i] >= nums[max_idx[-1]]:
            max_idx.pop()
        max_idx.append(i)
        res.append(nums[max_idx[0]])
    return res

#@title Example

nums = [1,3,-1,-3,5,3,6,7]
k = 3

Exercis8(nums, k)

"""### Question 9"""

def Exercise9(s, t):
    freq_t = {}
    for char in t:
        freq_t[char] = freq_t.get(char, 0) + 1

    left, right = 0, 0
    window = {}
    found = False
    min_window = ""

    while right < len(s):
        char = s[right]
        window[char] = window.get(char, 0) + 1

        while all(window.get(char, 0) >= freq_t[char] for char in freq_t):
            found = True
            curr_window = s[left:right+1]
            if not min_window or len(curr_window) < len(min_window):
                min_window = curr_window

            window[s[left]] -= 1
            left += 1

        right += 1

    return min_window if found else ""

#@title Example

s = "ADOBECODEBANC"
t = "ABC"

Exercise9(s, t)